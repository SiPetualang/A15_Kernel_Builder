name: Build and Release GKI Kernels

permissions:
  contents: write # Allow writing to repository contents (for pushing tags)
  actions: write # Allows triggering actions

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Choose Release Type"
        required: true
        type: choice
        options:
          - Actions
          - Pre-Release
          - Release
        default: Pre-Release
      kernelsu_variant:
        description: "Select KernelSU"
        required: true
        type: choice
        options:
          - Official
          - Next
          - MKSU
          - SukiSU
        default: SukiSU
      kernelsu_branch:
        description: "Select KSU branch"
        required: true
        type: choice
        options:
          - Stable
          - Dev
        default: Dev
      use_zram:
        description: 'Do you want to enable adding lz4+zstd?'
        required: true
        type: boolean
        default: false
      use_kpm:
        description: 'Do you want to enable the KPM function?'
        required: false
        type: boolean
        default: false
      fast:
        description: 'Compilation speedup (experimental): average speedup of 7 minutes'
        required: false
        type: boolean
        default: false
  
jobs:      
  set-matrix:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          VARIANTS=()
          [[ "${{ inputs.kernelsu_variant }}" == "Official" ]] && VARIANTS+=("\"KSU\"")
          [[ "${{ inputs.kernelsu_variant }}" == "MKSU" ]] && VARIANTS+=("\"MKSU\"")
          [[ "${{ inputs.kernelsu_variant }}" == "Next" ]] && VARIANTS+=("\"NEXT\"")
          [[ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]] && VARIANTS+=("\"SUKISU\"")
          echo "matrix={\"kernelsu_variant\": [$(IFS=,; echo "${VARIANTS[*]}")]}" >> $GITHUB_OUTPUT

  build-kernel:
    needs: set-matrix
    uses: ./.github/workflows/kernel-a15-6.6.yml
    secrets: inherit
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    with:
      kernelsu_variant: ${{ inputs.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      use_zram: ${{ inputs.use_zram }}
      use_kpm: ${{ inputs.use_kpm }}
      fast: ${{ inputs.fast }}

  trigger-release:
    if: ${{ inputs.release_type == 'Release' || inputs.release_type == 'Pre-Release' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    needs:
      - build-kernel
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_NAME: "GKI Kernels With KernelSU-${{ inputs.kernelsu_variant }} ${{ inputs.kernelsu_branch }} & SUSFS v1.5.7 *TEST BUILD*"
      RELEASE_NOTES: |
        > [!CAUTION]
        > Take your own risk! Nobody tested. `fastboot boot` bofore flash it.

        Features:
        - ${{ inputs.kernelsu_variant }} (${{ inputs.kernelsu_branch }})
        - SUSFS ඞ v1.5.8
        - Manual Syscall Hooks
        - Wireguard Support
        - BBR Support
        ${{ inputs.use_kpm && '- KPM Support' || '' }}

        Usage: 
          - Use [HorizonKernelFlasher](https://github.com/libxzr/HorizonKernelFlasher). Don't use Kernel Flasher, it is broken.
          - Another way (same as update), is, touch “Working”(status) card in SukiSU Ultra, touch GKI/non-GKI installation, touch Install Anykernel3, then select AnyKernel3 zip file.

        > [!NOTE]  
        > SUS SU Mode 2 will show as disabled or not compatble due to non-kprobe hooks and is not needed anymore! 

        SUSFS manage WebUI: 
        - https://github.com/sidex15/susfs4ksu-module

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get KernelSU variant refs and links
        run: |
          BRANCH="${{ inputs.kernelsu_branch }}"
      
          get_ref() {
            local name="$1" repo="$2" path="$3" mode="$4"
            if [[ "$mode" == "tag" ]]; then
              ref=$(git ls-remote --tags --sort=-v:refname "$repo" | grep -o 'refs/tags/.*' | cut -d/ -f3 | head -n1)
              url="https://github.com/$path/releases/tag/$ref"
            else
              ref=$(git ls-remote "$repo" HEAD | awk '{print $1}')
              url="https://github.com/$path/commit/$ref"
            fi
            echo "${name}_REF=$ref" >> $GITHUB_ENV
            echo "${name}_URL=$url" >> $GITHUB_ENV
          }
      
          [[ "$BRANCH" == "Stable" ]] && MODE="tag" || MODE="commit"

          get_ref "SUKISU" "https://github.com/ShirkNeko/SukiSU_patch.git" "ShirkNeko/SukiSU_patch" "$MODE"
          get_ref "KSU" "https://github.com/tiann/KernelSU.git" "tiann/KernelSU" "$MODE"
          get_ref "NEXT" "https://github.com/KernelSU-Next/KernelSU-Next.git" "KernelSU-Next/KernelSU-Next" "$MODE"
          get_ref "MKSU" "https://github.com/5ec1cff/KernelSU.git" "5ec1cff/KernelSU" "commit"

      - name: Set KSU Version and Release Name
        run: |
          # Use temporary directories to avoid conflicts
          if [ "${{ inputs.kernelsu_variant }}" = "Next" ]; then
            echo "Processing Next variant"
            git clone https://github.com/KernelSU-Next/KernelSU-Next.git ksu-next-tmp
            cd ksu-next-tmp
            KSU_GIT_VERSION=$(git rev-list --count HEAD)
            KSU_VERSION=$((10000 + KSU_GIT_VERSION + 200))
            echo "Next version: $KSU_VERSION"
            cd ..
            rm -rf ksu-next-tmp
            echo "RELEASE_NAME=\"GKI Kernel: KernelSU-Next ($KSU_VERSION) & SUSFS v1.5.8\"" >> $GITHUB_ENV
            
          elif [ "${{ inputs.kernelsu_variant }}" = "SukiSU" ]; then
            echo "Processing SukiSU variant"
            git clone https://github.com/SukiSU-Ultra/SukiSU-Ultra.git suki-tmp
            cd suki-tmp
            KSU_GIT_VERSION=$(git rev-list --count HEAD)
            KSU_VERSION=$((10000 + KSU_GIT_VERSION + 700))
            echo "SukiSU version: $KSU_VERSION"
            cd ..
            rm -rf suki-tmp
            echo "RELEASE_NAME=\"GKI Kernel: SukiSU ($KSU_VERSION) & SUSFS v1.5.8\"" >> $GITHUB_ENV
            
          else
            echo "Using default naming for variant: ${{ inputs.kernelsu_variant }}"
            echo "RELEASE_NAME=\"GKI Kernel: ${{ inputs.kernelsu_variant }} & SUSFS v1.5.8\"" >> $GITHUB_ENV
          fi

      - name: Get commit hashes and generate commit URLs
        run: |
          GITLAB_OWNER="simonpunk"
          GITLAB_REPO="susfs4ksu"
          
          declare -A BRANCH_MAP=(
            ["gki_android15_6_6"]="gki-android15-6.6"
          )
          
          for var_name in "${!BRANCH_MAP[@]}"; do
            branch_name="${BRANCH_MAP[$var_name]}"
            COMMIT_HASH=$(git ls-remote https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO.git refs/heads/$branch_name | awk '{ print $1 }')
            
            if [[ -n "$COMMIT_HASH" ]]; then
              COMMIT_URL="https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO/-/commit/$COMMIT_HASH"
              echo "$branch_name Commit: $COMMIT_HASH"
              echo "$branch_name Commit URL: $COMMIT_URL"
              
              echo "COMMIT_HASH_${var_name}=$COMMIT_HASH" >> "$GITHUB_ENV"
              echo "COMMIT_URL_${var_name}=$COMMIT_URL" >> "$GITHUB_ENV"
            fi
          done

      - name: Append Commit Hashes & Links to `RELEASE_NOTES` & Append KernelSU-Next Reference to `RELEASE_NOTES`
        run: |
          if [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            echo "This is the SukiSU variant"
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
            echo "$RELEASE_NOTES" >> $GITHUB_ENV
            echo "SukiSU Ultra Manager:" >> $GITHUB_ENV
            echo "- https://github.com/SukiSU-Ultra/SukiSU-Ultra / https://t.me/SukiKSU" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          elif [ "${{ inputs.kernelsu_variant }}" == "Official" ]; then
            echo "This is the SukiSU variant"
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
            echo "$RELEASE_NOTES" >> $GITHUB_ENV
            echo "KernelSU Manager:" >> $GITHUB_ENV
            echo "- https://github.com/tiann/KernelSU / https://t.me/KernelSU_group" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          elif [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "This is the SukiSU variant"
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
            echo "$RELEASE_NOTES" >> $GITHUB_ENV
            echo "KernelSU Next Manager:" >> $GITHUB_ENV
            echo "- https://github.com/rifsxd/KernelSU-Next / https://t.me/ksunext_group" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
            echo "This is the SukiSU variant"
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
            echo "$RELEASE_NOTES" >> $GITHUB_ENV
            echo "MKSU Manager:" >> $GITHUB_ENV
            echo "- https://github.com/5ec1cff/KernelSU / https://t.me/mksu_ci" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Append Commit Hashes & Links to `RELEASE_NOTES` & Append KernelSU-Next Reference to `RELEASE_NOTES`
        run: |
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "LTO: thin" >> $GITHUB_ENV
          echo "<details>" >> $GITHUB_ENV
          echo "<summary>Commit Hashes and Links</summary>" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "- KernelSU:" >> $GITHUB_ENV
          if [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            echo "  - ${{ inputs.kernelsu_variant }}-${{ inputs.kernelsu_branch }}: [${{ env.SUKISU_REF }}](${{ env.SUKISU_URL }})" >> $GITHUB_ENV
          elif [ "${{ inputs.kernelsu_variant }}" == "Official" ]; then
             echo "  - ${{ inputs.kernelsu_variant }}-${{ inputs.kernelsu_branch }}: [${{ env.KSU_REF }}](${{ env.KSU_URL }})" >> $GITHUB_ENV
          elif [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
             echo "  - ${{ inputs.kernelsu_variant }}-${{ inputs.kernelsu_branch }}: [${{ env.NEXT_REF }}](${{ env.NEXT_URL }})" >> $GITHUB_ENV
          elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
             echo "  - ${{ inputs.kernelsu_variant }}-${{ inputs.kernelsu_branch }}: [${{ env.MKSU_REF }}](${{ env.MKSU_URL }})" >> $GITHUB_ENV
          fi
          echo "- SUSFS4KSU:" >> $GITHUB_ENV
          echo "  - gki-android15-6.6: [${{ env.COMMIT_HASH_gki_android15_6_6 }}](${{ env.COMMIT_URL_gki_android15_6_6 }})" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "</details>" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Generate and Create New Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Fetch the latest tag from GitHub (this is the latest tag based on the GitHub API)
          LATEST_TAG=$(gh api repos/${{ github.repository }}/tags --jq '.[0].name')
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v1.5.8-r0"
          fi

          NEW_TAG=$(echo "$LATEST_TAG" | awk -F'-r' '{suffix=$2; if (!suffix) suffix=0; suffix++; printf "%s-r%d", $1, suffix}')
    
          echo "New tag: $NEW_TAG"
          echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV

          git tag $NEW_TAG
          git push origin $NEW_TAG

      # Download Artifacts for A12 (Only if A12 Build is successful or input is true or empty)
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}
          prerelease: ${{ inputs.release_type == 'Pre-Release' }}
          release_name: ${{ env.currentdate }}
          body: ${{ env.RELEASE_NOTES }}

      - name: Upload Release Assets Dynamically
        run: |
          for file in ./downloaded-artifacts/kernel-*/*; do
            if [ -d "$file" ]; then
              continue
            fi
            echo "Uploading $file..."
            gh release upload ${{ env.NEW_TAG }} "$file"
          done

      - name: Display Files Uploaded
        run: |
          echo "GitHub release created with the following files:"
          ls ./downloaded-artifacts/**/*
